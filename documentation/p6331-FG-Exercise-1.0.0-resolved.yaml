---
openapi: 3.0.0
info:
  title: Temperatures
  description: RESTful API for storing temperature measurements with timestamps.
  license:
    name: MIT
    url: https://github.com/prouzpe3/fg-exercise/blob/main/LICENSE
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/p6331/FG-Exercise/1.0.0
  description: SwaggerHub API Auto Mocking
paths:
  /temperature-range:
    get:
      summary: Finds the longest range the temperature was inside the bounds considering the optional daytime bounds.
      parameters:
      - name: tempLBound
        in: query
        description: The lower bound for the temperature.
        required: true
        style: form
        explode: true
        schema:
          type: number
          format: double
        example: 10.5
      - name: tempUBound
        in: query
        description: The upper bound for the temperature.
        required: true
        style: form
        explode: true
        schema:
          type: number
          format: double
        example: 20
      - name: timeLBound
        in: query
        description: The lower bound for the time of the day. If not specified midnight is used.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
        example: 10
      - name: timeUBound
        in: query
        description: The upper bound for the time of the day. If not specified midnight is used.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
        example: 15
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTemperatureRange'
  /temperatures:
    get:
      summary: List all temperature records
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetTemperature'
    post:
      summary: Create a temperature record
      requestBody:
        description: Body describing a temperature record to be stored in the database.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostTemperature'
        required: true
      responses:
        "201":
          description: Successful Response
          headers:
            schema:
              $ref: '#/components/headers/TemperatureLocation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTemperature'
  /temperatures/{id}:
    get:
      summary: Retrieve given temperature
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTemperature'
        "404":
          description: Entity was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityNotFound'
    put:
      summary: Update given temperature
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: Body describing the new values for the temperature record to be stored in the database.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutTemperature'
        required: true
      responses:
        "201":
          description: Successful Response
          headers:
            schema:
              $ref: '#/components/headers/TemperatureLocation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTemperature'
    delete:
      summary: Remove given temperature
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: Successful Response
components:
  schemas:
    Exception:
      required:
      - code
      - description
      type: object
      properties:
        code:
          type: integer
          format: int64
        description:
          type: string
      example:
        code: 0
        description: An exception occurred.
    EntityNotFound:
      type: object
      example:
        code: 1
        description: Entity was not found.
      allOf:
      - $ref: '#/components/schemas/Exception'
    GetTemperatureRange:
      required:
      - timestampFrom
      - timestampTo
      type: object
      properties:
        timestampFrom:
          type: string
        timestampTo:
          type: string
      example:
        timestampFrom: 2021-08-01 12:59:59.00
        timestampTo: 2021-08-03 12:59:59.00
    Id:
      required:
      - id
      type: object
      properties:
        id:
          type: integer
          format: int64
      example:
        id: 1234
    Temperature:
      required:
      - temperature
      - timestamp
      type: object
      properties:
        timestamp:
          type: string
        temperature:
          type: number
          format: double
      example:
        timestamp: 2021-08-01 12:59:59.00
        temperature: 100.5
    GetTemperature:
      type: object
      allOf:
      - $ref: '#/components/schemas/Id'
      - $ref: '#/components/schemas/Temperature'
    PostTemperature:
      type: object
      allOf:
      - $ref: '#/components/schemas/Temperature'
    PutTemperature:
      type: object
      allOf:
      - $ref: '#/components/schemas/Temperature'
  responses:
    EntityNotFound:
      description: Entity was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EntityNotFound'
  headers:
    TemperatureLocation:
      description: The created resource can be accessed using this relative URL.
      style: simple
      explode: false
      schema:
        type: string
        example: /temperatures/12
